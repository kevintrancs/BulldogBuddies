{
  "_args": [
    [
      {
        "raw": "mongoose-friends",
        "scope": null,
        "escapedName": "mongoose-friends",
        "name": "mongoose-friends",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/ktran/Documents/BulldogBuddies/server-side"
    ]
  ],
  "_from": "mongoose-friends@latest",
  "_id": "mongoose-friends@0.2.5",
  "_inCache": true,
  "_location": "/mongoose-friends",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mongoose-friends-0.2.5.tgz_1498484922445_0.390041911508888"
  },
  "_npmUser": {
    "name": "numbers1311407",
    "email": "numbers1311407@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-friends",
    "scope": null,
    "escapedName": "mongoose-friends",
    "name": "mongoose-friends",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-friends/-/mongoose-friends-0.2.5.tgz",
  "_shasum": "82263537cdf953565b6c6aa3722c633f87779a3b",
  "_shrinkwrap": null,
  "_spec": "mongoose-friends",
  "_where": "/Users/ktran/Documents/BulldogBuddies/server-side",
  "author": {
    "name": "Travis Cox",
    "email": "numbers1311407@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/numbers1311407/mongoose-friends/issues"
  },
  "dependencies": {
    "async": "~0.2.9"
  },
  "description": "2-way friendship relationship plugin for Mongoose ODM",
  "devDependencies": {
    "mocha": "~1.13.0",
    "mongoose": ">= 4.7.3",
    "should": "~1.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "82263537cdf953565b6c6aa3722c633f87779a3b",
    "tarball": "https://registry.npmjs.org/mongoose-friends/-/mongoose-friends-0.2.5.tgz"
  },
  "gitHead": "e2ce770fde321cc9a483d6c0bf07fcc52129d2ba",
  "homepage": "https://github.com/numbers1311407/mongoose-friends#readme",
  "keywords": [
    "mongoose",
    "friendships",
    "friends"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "numbers1311407",
      "email": "numbers1311407@gmail.com"
    }
  ],
  "name": "mongoose-friends",
  "optionalDependencies": {},
  "readme": "mongoose-friends [![Build Status](https://travis-ci.org/numbers1311407/mongoose-friends.png)](http://travis-ci.org/numbers1311407/mongoose-friends)\n===\n\n2-way friendship relationship plugin for Mongoose ODM\n\n\nInstallation \n---\n\n    npm install mongoose-friends\n\n\nDescription and usage\n---\n\nEasily add \"friendships\" to your Mongoose user Model through a simple\nplugin.  The friendships are stored in a sub-document array on the model\ndoc without the need for a separate collection.\n\nJust include the plugin in the schema definition:\n\n    var friends = require(\"mongoose-friends\")\n    var schema = new mongoose.Schema({ ... })\n\n    // optionally specify a name for the path (default is \"friends\")\n    schema.plugin(friends({pathName: \"myCustomPath\"}));\n\n    var User = mongoose.model(\"User\", schema);\n\n\nInitiate a friend request via the `requestFriend` method:\n\n    User.requestFriend(user1._id, user2._id, callback);\n\nThe two users now share a friendship, with different statuses: \"requested\"\nand \"pending\", respectively.\n\n    User.getFriends(user1, function (err, friendships) {\n      // friendships looks like:\n      // [{status: \"requested\", added: <Date added>, friend: user2}]\n    });\n\n    User.getFriends(user2, function (err, friendships) {\n      // friendships looks like:\n      // [{status: \"pending\", added: <Date added>, friend: user1}]\n    });\n\nTo accept, just reciprocate the request:\n\n    User.requestFriend(user2._id, user1._id, callback);\n\nThe two users are now friends:\n\n    User.getFriends(user1, function (err, friendships) {\n      // friendships looks like:\n      // [{status: \"accepted\", added: <Date added>, friend: user2}]\n    });\n\n    User.getFriends(user2, function (err, friendships) {\n      // friendships looks like:\n      // [{status: \"accepted\", added: <Date added>, friend: user1}]\n    });\n\nTo remove a friendship at any point in the process, just:\n\n    User.removeFriend(user1, user2, callback);\n    // or vice-versa\n    User.removeFriend(user2, user1, callback);\n\nAll the static methods have instance variants:\n\n    user.getFriends(options, cb);\n    user.requestFriend(otheruser, cb);\n    user.removeFriend(badfriend, cb);\n\nRetrieving friends\n---\n\n`getFriends` is the interface to retrieve friends for a user.  It sits on \ntop of the normal Mongoose `find` API and has the same signature, he only \nexception that the first argument is a model (or the id of a model) that \nyou're querying for.  This means you can pass along field selects, sorts\nlimits, etc.\n\n    // the signature\n    User.getFriends(user, conditions, select, options, callback);\n\nFor example to find only friends whose names start with \"Bo\" you could:\n\n    User.getFriends(user, {name: /^Bo/}, cb);\n\nTo select only the name field you might:\n\n    User.getFriends(user, {}, {name: 1}, cb);\n\nOr to sort by user name you might:\n\n    User.getFriends(user, {}, null, {sort: {name: 1}}, cb);\n\nFriendships of different statuses can be queried in this manner:\n\n    // get the pending friendships for a user (given that the pathname\n    // for the friends array is left the default, \"friends\")\n    var Status = require(\"mongoose-friends\").Status;\n    User.getFriends(user, {\"friends.status\": Status.Pending}, cb);\n\n... but for convenience purposes they can also be retrieved through\nprovided convenience methods:\n\n    User.getPendingFriends;\n    User.getAcceptedFriends;\n    User.getRequestedFriends;\n    // with instance method versions provided for each\n\nThe callback return value of `getFriends` is an array of friends, wrapped \nwith the friendship metadata for the given user, like:\n\n    [{\n      // One of pending|accepted|requested where:\n      // \n      // pending: received, but not yet accepted\n      // requested: sent, but not yet accepted by other party\n      // accepted: accepted by both parties\n      status: \"accepted\",\n\n      // The date the friendship request was first *created* (NOT accepted)\n      added: <the date added>,\n\n      // The remote friend doc, fields filtered by any passed field select,\n      // sorted by any passed sort, etc.\n      friend: <the friend doc>\n    }]\n\n### Gotchas\n\nThe bare-metal nature of how `.getFriends` sits atop of `Model.find` might\nencourage one to simply circumvent it entirely and use `Model.find` directly.\n\nThis is of course acceptable, but a few things should be noted.  When querying\nfor friends with a given status with `.getFriends`, the status is actually\n***reversed*** in the query.  This makes sense when considering how friendships\nare stored and queried.  If you're looking for the \"requested\" friendships of\nuser A, you're actually looking for all \"pending\" friendships that other users\nhave with user A.\n\n`.getFriends` makes this transparent, and furthermore, it does not even return\nthe friends data of the docs it queries.  Rather it queries *on* the friends\ndata, then maps the metadata of the friendships for the user in question on the\nresults.  This means that the `friends` field is actually unselected by default\nand not returned.  Essentially the process is:\n\n1. Find friends of user, not including their friendships\n2. Retrieve the user, including their friendships\n3. Map the user's friendship metadata for each found friend onto the result\n\nIndexing\n---\n\nBy default, the plugin will add a multikey index on the friends array.\nIf you do not want this behavior for whatever reason, just pass \n`index: false` to the plugin options, like:\n\n    schema.plugin(friends({index: false}));\n\n\nRoadmap\n---\n\n- Add \"favorite\" friend functionality\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/numbers1311407/mongoose-friends.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.2.5"
}
